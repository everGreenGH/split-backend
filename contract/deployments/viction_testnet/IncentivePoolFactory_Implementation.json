{
  "address": "0xBf618F913AEA5b11D03cb58Ace68b36C6f9F9F62",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialAmount",
          "type": "uint256"
        }
      ],
      "name": "CreateIncentivePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "incentiveToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "incentiveAmountPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "affiliateAmountPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "userAmountPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "leftTransactionNum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTransactionNumPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimeStamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonDtos.IncentiveInfo",
              "name": "incentiveInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct CommonDtos.CreateIncentivePoolReq",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "createIncentivePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIncentivePoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "incentivePools",
      "outputs": [
        {
          "internalType": "contract IncentivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAdmin_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolCreationFee_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCreationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "incentivePoolAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "affiliate",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "user",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct CommonDtos.Referral[]",
                  "name": "referrals",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonDtos.PoolUpdateInfo[]",
              "name": "info",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CommonDtos.UpdateIncentivePoolsReq",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "updateIncentivePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3da8dd25fe91ca1f133a1517bb1aee141488a479aeaab62e3e2813d452b76a58",
  "receipt": {
    "to": null,
    "from": "0x3cA21C8364a6B132E30508cE030649a9883d4D8D",
    "contractAddress": "0xBf618F913AEA5b11D03cb58Ace68b36C6f9F9F62",
    "transactionIndex": 1,
    "gasUsed": "2103258",
    "logsBloom": "0x
    "blockHash": "0x0ee3dadfb67a7c5abfd5746e4a4da82caf32eaea00467c271d4243a4f7c53a42",
    "transactionHash": "0x3da8dd25fe91ca1f133a1517bb1aee141488a479aeaab62e3e2813d452b76a58",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 301711,
        "transactionHash": "0x3da8dd25fe91ca1f133a1517bb1aee141488a479aeaab62e3e2813d452b76a58",
        "address": "0xBf618F913AEA5b11D03cb58Ace68b36C6f9F9F62",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0x96a9a0c7ae36fd21f107447fcec943e4af9588761f7ff6ceb20dbefdceba6adc"
      }
    ],
    "blockNumber": 301711,
    "cumulativeGasUsed": "2103258",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2340d8f2275c10b390fabbab8fdda4bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"CreateIncentivePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"incentiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"incentiveAmountPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateAmountPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftTransactionNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransactionNumPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonDtos.IncentiveInfo\",\"name\":\"incentiveInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CommonDtos.CreateIncentivePoolReq\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"createIncentivePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivePoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentivePools\",\"outputs\":[{\"internalType\":\"contract IncentivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreationFee_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"incentivePoolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct CommonDtos.Referral[]\",\"name\":\"referrals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonDtos.PoolUpdateInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonDtos.UpdateIncentivePoolsReq\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"updateIncentivePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"_notEntered\":{\"details\":\"Guard variable for re-entrancy checks\"},\"poolCreationFee\":{\"details\":\"Should be multiplied by unit of ether(1e18)\"}},\"version\":1},\"userdoc\":{\"events\":{\"CreateIncentivePool(address,address,uint256)\":{\"notice\":\"Emitted when leftTransactionNum is added\"}},\"kind\":\"user\",\"methods\":{\"incentivePools(uint256)\":{\"notice\":\"List of product incentive pools\"},\"isValidPool(address)\":{\"notice\":\"Mapping of pool address to validness(is it deployed?)\"},\"masterAdmin()\":{\"notice\":\"Address of the master admin of split\"},\"poolCreationFee()\":{\"notice\":\"Pool creation fee paid by contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IncentivePoolFactory.sol\":\"IncentivePoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/IncentivePool.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./IncentivePoolStorage.sol\\\";\\n\\ncontract IncentivePool is IncentivePoolStorage {\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"ALREADY_ENTERED\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    constructor(DeployIncentivePoolReq memory req) {\\n        IncentiveInfo memory info = req.incentiveInfo;\\n\\n        factory = msg.sender;\\n        poolAdmin = req.deployer;\\n        incentiveInfo = info;\\n\\n        isClaimPaused = false;\\n        isUpdatePaused = false;\\n\\n        _notEntered = true;\\n    }\\n\\n    function addLeftTransactionNum(uint256 addedTransactionNum) external {\\n        require(msg.sender == factory || msg.sender == poolAdmin, \\\"ACCESS_DENIED\\\");\\n\\n        uint256 addedIncentiveAmount = addedTransactionNum * incentiveInfo.incentiveAmountPerTransaction;\\n        incentiveInfo.incentiveToken.transferFrom(msg.sender, address(this), addedIncentiveAmount);\\n\\n        // msg.sender\\uac00 factory\\uc778 \\uacbd\\uc6b0, \\uc0dd\\uc131\\uc790\\uc5d0\\uc11c leftTransactionNum\\uc744 \\uc124\\uc815\\n        if (msg.sender != factory) {\\n            incentiveInfo.leftTransactionNum += addedTransactionNum;\\n        }\\n\\n        emit AddLeftTransactionNum(addedTransactionNum, incentiveInfo.leftTransactionNum, addedIncentiveAmount);\\n    }\\n\\n    function updatePool(Referral[] memory referrals) external {\\n        require(isUpdatePaused == false, \\\"CLAIM_PAUSED\\\");\\n        require(msg.sender == factory, \\\"ACCESS_DENIED\\\");\\n\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            // \\ucd94\\ucc9c\\uc778 \\uc815\\ubcf4 \\uc5c5\\ub370\\uc774\\ud2b8\\n            ConnectedUserData storage userData = affiliateToLeftTransactionNum[referrals[i].affiliate];\\n\\n            bool isRegisteredUser = userData.userToIsRegisteredUser[referrals[i].user];\\n            if (!isRegisteredUser) {\\n                userData.userToIsRegisteredUser[referrals[i].user] = true;\\n                userData.users.push(referrals[i].user);\\n            }\\n\\n            userData.leftTransactionNum++;\\n\\n            // \\uc0ac\\uc6a9\\uc790 \\uc815\\ubcf4 \\uc5c5\\ub370\\uc774\\ud2b8\\n            userToLeftTransactionNum[referrals[i].user]++;\\n        }\\n    }\\n\\n    function claimAffiliateIncentive() external nonReentrant {\\n        require(isClaimPaused == false, \\\"CLAIM_PAUSED\\\");\\n\\n        ConnectedUserData storage userData = affiliateToLeftTransactionNum[msg.sender];\\n        uint256 claimTransactionNum = userData.leftTransactionNum;\\n        userData.leftTransactionNum = 0;\\n\\n        require(claimTransactionNum > 0, \\\"NO_TRANSACTION\\\");\\n\\n        uint256 claimValue = claimTransactionNum * incentiveInfo.affiliateAmountPerTransaction;\\n        incentiveInfo.incentiveToken.transfer(msg.sender, claimValue);\\n\\n        emit ClaimIncentive(msg.sender, ClaimType.AFFILIATE, claimTransactionNum, claimValue);\\n    }\\n\\n    function claimUserIncentive() external nonReentrant {\\n        require(isClaimPaused == false, \\\"CLAIM_PAUSED\\\");\\n\\n        uint256 claimTransactionNum = userToLeftTransactionNum[msg.sender];\\n        require(claimTransactionNum > 0, \\\"NO_TRANSACTION\\\");\\n\\n        userToLeftTransactionNum[msg.sender] = 0;\\n\\n        uint256 claimValue = claimTransactionNum * incentiveInfo.userAmountPerTransaction;\\n        incentiveInfo.incentiveToken.transfer(msg.sender, claimValue);\\n\\n        emit ClaimIncentive(msg.sender, ClaimType.USER, claimTransactionNum, claimValue);\\n    }\\n}\\n\",\"keccak256\":\"0x0deef52bd52e759be0fb9dd8bc2a3037779c2fb0c2e5bca093d7eabd3f36984d\"},\"src/IncentivePoolFactory.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./common/upgradeable/Initializable.sol\\\";\\nimport \\\"./interface/IncentivePoolFactoryInterface.sol\\\";\\nimport \\\"./IncentivePool.sol\\\";\\n\\ncontract IncentivePoolFactory is IncentivePoolFactoryInterface, Initializable {\\n    ///  @notice List of product incentive pools\\n    IncentivePool[] public incentivePools;\\n\\n    ///  @notice Mapping of pool address to validness(is it deployed?)\\n    mapping(address => bool) public isValidPool;\\n\\n    ///  @notice Pool creation fee paid by contract\\n    ///  @dev Should be multiplied by unit of ether(1e18)\\n    uint256 public poolCreationFee;\\n\\n    ///  @notice Address of the master admin of split\\n    address public masterAdmin;\\n\\n    ///  @dev Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"ALREADY_ENTERED\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address masterAdmin_, uint256 poolCreationFee_) public initializer {\\n        masterAdmin = masterAdmin_;\\n        poolCreationFee = poolCreationFee_;\\n\\n        _notEntered = true;\\n    }\\n\\n    function getIncentivePoolAddresses() external view returns (address[] memory) {\\n        uint len = incentivePools.length;\\n        address[] memory result = new address[](len);\\n\\n        for (uint i = 0; i < len; i += 1) {\\n            address incentivePool = address(incentivePools[i]);\\n            result[i] = incentivePool;\\n        }\\n\\n        return result;\\n    }\\n\\n    function createIncentivePool(CreateIncentivePoolReq memory req) external payable nonReentrant {\\n        IncentiveInfo memory info = req.incentiveInfo;\\n\\n        require(msg.value >= poolCreationFee, \\\"NOT_ENOUGHT_VALUE\\\");\\n        require(address(info.incentiveToken) != address(0), \\\"INVALID_TOKEN_ADDRESS\\\");\\n\\n        uint256 initialAmount = info.leftTransactionNum * info.incentiveAmountPerTransaction;\\n        info.incentiveToken.transferFrom(msg.sender, address(this), initialAmount);\\n\\n        DeployIncentivePoolReq memory params;\\n        params.deployer = msg.sender;\\n        params.incentiveInfo = info;\\n\\n        IncentivePool incentivePool = new IncentivePool(params);\\n        incentivePools.push(incentivePool);\\n        isValidPool[address(incentivePool)] = true;\\n\\n        info.incentiveToken.approve(address(incentivePool), initialAmount);\\n        incentivePool.addLeftTransactionNum(info.leftTransactionNum);\\n\\n        emit CreateIncentivePool(msg.sender, address(incentivePool), initialAmount);\\n    }\\n\\n    function updateIncentivePools(UpdateIncentivePoolsReq memory req) external nonReentrant {\\n        require(msg.sender == masterAdmin, \\\"ACCESS_DENIED\\\");\\n\\n        for (uint256 i = 0; i < req.info.length; i++) {\\n            address poolAddress = req.info[i].incentivePoolAddress;\\n            require(isValidPool[poolAddress], \\\"INVALID_POOL_ADDRESS\\\");\\n\\n            IncentivePool incentivePool = IncentivePool(poolAddress);\\n            incentivePool.updatePool(req.info[i].referrals);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc19bee29396c89c4cd215e8de96238ee2674cb2fa45a596689d4658002961c5\"},\"src/IncentivePoolStorage.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./interface/IncentivePoolInterface.sol\\\";\\n\\ncontract IncentivePoolStorage is IncentivePoolInterface {\\n    /// @notice IncentivePoolFactory \\ucee8\\ud2b8\\ub799\\ud2b8 \\uc8fc\\uc18c\\n    address public factory;\\n\\n    /// @notice \\ud480 \\uad00\\ub9ac\\uc790 \\uc8fc\\uc18c\\n    address public poolAdmin;\\n\\n    /// @notice \\uc778\\uc13c\\ud2f0\\ube0c \\uad00\\ub828 \\ub370\\uc774\\ud130\\n    IncentiveInfo public incentiveInfo;\\n\\n    mapping(address => ConnectedUserData) public affiliateToLeftTransactionNum;\\n\\n    mapping(address => uint256) public userToLeftTransactionNum;\\n\\n    bool public isClaimPaused;\\n\\n    bool public isUpdatePaused;\\n\\n    ///  @dev Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n}\\n\",\"keccak256\":\"0x84f99ecfc1f5c95eee3e97fd26d4b4dfa471d6bb7f21500e7b2332579274a8b7\"},\"src/common/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x91eee3141487cbd609801b77dcc2c735a1d8e81b8b9ed0cfe4abc30cec9028ce\",\"license\":\"MIT\"},\"src/common/upgradeable/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61a2215ae62e961ed096a5aa73d50b9eeb6f096c0931a6c052e8f1f12bd9ffbb\",\"license\":\"BSD-3-Clause\"},\"src/common/upgradeable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x1ea77583ca01cbefc4132742fa2c3cfd17b6ff3336822ca4381d6cb517e4af6e\",\"license\":\"MIT\"},\"src/interface/CommonDtos.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../common/token/IERC20.sol\\\";\\n\\ninterface CommonDtos {\\n    struct IncentiveInfo {\\n        IERC20 incentiveToken;\\n        uint256 incentiveAmountPerTransaction;\\n        uint256 affiliateAmountPerTransaction;\\n        uint256 userAmountPerTransaction;\\n        uint256 leftTransactionNum;\\n        uint256 maxTransactionNumPerWallet;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct CreateIncentivePoolReq {\\n        IncentiveInfo incentiveInfo;\\n    }\\n\\n    struct DeployIncentivePoolReq {\\n        address deployer;\\n        IncentiveInfo incentiveInfo;\\n    }\\n\\n    struct Referral {\\n        address affiliate;\\n        address user;\\n    }\\n\\n    struct PoolUpdateInfo {\\n        address incentivePoolAddress;\\n        Referral[] referrals;\\n    }\\n\\n    struct UpdateIncentivePoolsReq {\\n        PoolUpdateInfo[] info;\\n    }\\n}\\n\",\"keccak256\":\"0x20f7700de78bdb9efa1b6f745b2f6a13d0f39c7506216a13a71a97ef5865f436\"},\"src/interface/IncentivePoolFactoryInterface.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./CommonDtos.sol\\\";\\n\\ninterface IncentivePoolFactoryInterface is CommonDtos {\\n    /// @notice Emitted when leftTransactionNum is added\\n    event CreateIncentivePool(address caller, address poolAddress, uint256 initialAmount);\\n}\\n\",\"keccak256\":\"0x70621b7a9e99808c9f82a71884de9c0d2fa8d5c7dac7ced68b67a85c2065fcd9\"},\"src/interface/IncentivePoolInterface.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./CommonDtos.sol\\\";\\n\\ninterface IncentivePoolInterface is CommonDtos {\\n    enum ClaimType {\\n        AFFILIATE,\\n        USER\\n    }\\n\\n    struct ConnectedUserData {\\n        mapping(address => bool) userToIsRegisteredUser; // \\uc774\\ubbf8 \\ub4f1\\ub85d\\ub41c \\uc0ac\\uc6a9\\uc790\\uc778\\uc9c0 \\uccb4\\ud06c\\n        address[] users; // \\uc0ac\\uc6a9\\uc790 \\uc9c0\\uac11 \\uc8fc\\uc18c\\n        uint256 leftTransactionNum; // \\ucd94\\ucc9c\\uc778\\uc774 \\ubcf4\\uc0c1\\uc744 \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 (\\ub0a8\\uc544\\uc788\\ub294) TX \\ud569\\n    }\\n\\n    /// @notice Emitted when leftTransactionNum is added\\n    event AddLeftTransactionNum(uint256 addedTransactionNum, uint256 totalTransactionNum, uint256 addedIncentiveAmount);\\n\\n    /// @notice Emitted when affiliate claim the incentive\\n    event ClaimIncentive(\\n        address indexed caller,\\n        ClaimType indexed claimType,\\n        uint256 claimTransactionNum,\\n        uint256 claimedValue\\n    );\\n}\\n\",\"keccak256\":\"0xa613bb3aae32a42d5a5163bbe4ade5aaf04536e464f563c3c1ea0b39bb915cd0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611db6806100ec6000396000f3fe608060405260043610620000855760003560e01c80636764cdc011620000545780636764cdc0146200014e5780638ba97b9b1462000173578063be74615f1462000198578063cd6dc68714620001bf57600080fd5b80632a68f64e146200008a578063581ff0c814620000c95780635ab78ee114620000e2578063660a69cb1462000127575b600080fd5b3480156200009757600080fd5b50600454620000ac906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000e0620000da36600462000b53565b620001e4565b005b348015620000ef57600080fd5b50620001166200010136600462000bf4565b60026020526000908152604090205460ff1681565b6040519015158152602001620000c0565b3480156200013457600080fd5b506200013f620005c3565b604051620000c0919062000c1b565b3480156200015b57600080fd5b50620000e06200016d36600462000c91565b620006a3565b3480156200018057600080fd5b50620000ac6200019236600462000e91565b6200089d565b348015620001a557600080fd5b50620001b060035481565b604051908152602001620000c0565b348015620001cc57600080fd5b50620000e0620001de36600462000eab565b620008c8565b600454600160a01b900460ff16620002355760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b60448201526064015b60405180910390fd5b6004805460ff60a01b1916905580516003543410156200028c5760405162461bcd60e51b81526020600482015260116024820152704e4f545f454e4f554748545f56414c554560781b60448201526064016200022c565b80516001600160a01b0316620002dd5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b60448201526064016200022c565b600081602001518260800151620002f5919062000ef0565b82516040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156200034d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000373919062000f12565b506200037e62000a00565b3381526020810183905260405160009082906200039b9062000a6a565b62000409919060006101008201905060018060a01b038084511683526020840151818151166020850152602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c081015160e0850152505092915050565b604051809103906000f08015801562000426573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0384811691821790925560008181526002602052604090819020805460ff19169094179093558751925163095ea7b360e01b8152600481019190915260248101879052929350169063095ea7b3906044016020604051808303816000875af1158015620004d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fc919062000f12565b506080840151604051634753a7a160e11b815260048101919091526001600160a01b03821690638ea74f4290602401600060405180830381600087803b1580156200054657600080fd5b505af11580156200055b573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201529081018690527f1ebff2f2b8dfaf965fffb2fddfa8e705e28ca6c7f0966cfc8f8587449774b6e09250606001905060405180910390a150506004805460ff60a01b1916600160a01b179055505050565b60015460609060008167ffffffffffffffff811115620005e757620005e762000a78565b60405190808252806020026020018201604052801562000611578160200160208202803683370190505b50905060005b828110156200069c5760006001828154811062000638576200063862000f36565b9060005260206000200160009054906101000a90046001600160a01b03169050808383815181106200066e576200066e62000f36565b6001600160a01b0390921660209283029190910190910152506200069460018262000f4c565b905062000617565b5092915050565b600454600160a01b900460ff16620006f05760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b60448201526064016200022c565b6004805460ff60a01b1981169091556001600160a01b03163314620007485760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064016200022c565b60005b815151811015620008865760008260000151828151811062000771576200077162000f36565b602090810291909101810151516001600160a01b0381166000908152600290925260409091205490915060ff16620007e35760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f504f4f4c5f4144445245535360601b60448201526064016200022c565b6000819050806001600160a01b031663f8a8f9e78560000151858151811062000810576200081062000f36565b6020026020010151602001516040518263ffffffff1660e01b81526004016200083a919062000f67565b600060405180830381600087803b1580156200085557600080fd5b505af11580156200086a573d6000803e3d6000fd5b50505050505080806200087d9062000fc5565b9150506200074b565b50506004805460ff60a01b1916600160a01b179055565b60018181548110620008ae57600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff1615808015620008e95750600054600160ff909116105b80620009055750303b15801562000905575060005460ff166001145b6200096a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200022c565b6000805460ff1916600117905580156200098e576000805461ff0019166101001790555b6004805460038490556001600160a81b0319166001600160a01b03851617600160a01b1790558015620009fb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b604051806040016040528060006001600160a01b0316815260200162000a656040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b610d9d8062000fe483390190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171562000ab45762000ab462000a78565b60405290565b6040516020810167ffffffffffffffff8111828210171562000ab45762000ab462000a78565b6040805190810167ffffffffffffffff8111828210171562000ab45762000ab462000a78565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000b325762000b3262000a78565b604052919050565b6001600160a01b038116811462000b5057600080fd5b50565b600060e0828403121562000b6657600080fd5b6040516020810181811067ffffffffffffffff8211171562000b8c5762000b8c62000a78565b60405262000b9962000a8e565b833562000ba68162000b3a565b808252506020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c0820152808252508091505092915050565b60006020828403121562000c0757600080fd5b813562000c148162000b3a565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000c5e5783516001600160a01b03168352928401929184019160010162000c37565b50909695505050505050565b600067ffffffffffffffff82111562000c875762000c8762000a78565b5060051b60200190565b60006020828403121562000ca457600080fd5b67ffffffffffffffff808335111562000cbc57600080fd5b6020833584018503121562000cd057600080fd5b62000cda62000aba565b818435850135111562000cec57600080fd5b83358401803501601f8101861362000d0357600080fd5b62000d1962000d13823562000c6a565b62000b06565b81358082526020808301929160051b84010188101562000d3857600080fd5b602083015b6020843560051b85010181101562000e8357858135111562000d5e57600080fd5b803584016040818b03601f1901121562000d7757600080fd5b62000d8162000ae0565b62000d90602083013562000b3a565b60208201358152876040830135111562000da957600080fd5b6040820135820191508a603f83011262000dc257600080fd5b62000dd562000d13602084013562000c6a565b602083810135808352908201919060061b84016040018d81111562000df957600080fd5b6040850194505b8085101562000e63576040858f03121562000e1a57600080fd5b62000e2462000ae0565b62000e30863562000b3a565b8535815262000e43602087013562000b3a565b602086013560208201528084525060208301925060408501945062000e00565b508060208401525050808552505060208301925060208101905062000d3d565b508352509095945050505050565b60006020828403121562000ea457600080fd5b5035919050565b6000806040838503121562000ebf57600080fd5b823562000ecc8162000b3a565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161562000f0d5762000f0d62000eda565b500290565b60006020828403121562000f2557600080fd5b8151801515811462000c1457600080fd5b634e487b7160e01b600052603260045260246000fd5b6000821982111562000f625762000f6262000eda565b500190565b602080825282518282018190526000919060409081850190868401855b8281101562000fb857815180516001600160a01b039081168652908701511686850152928401929085019060010162000f84565b5091979650505050505050565b600060001982141562000fdc5762000fdc62000eda565b506001019056fe608060405234801561001057600080fd5b50604051610d9d380380610d9d83398101604081905261002f91610132565b60208181015160008054336001600160a01b03199182161790915592516001805485166001600160a01b0392831617905581516002805490951691161790925581015160035560408101516004556060810151600555608081015160065560a081015160075560c00151600855600b80546201000062ffffff199091161790556101d6565b604080519081016001600160401b03811182821017156100e457634e487b7160e01b600052604160045260246000fd5b60405290565b60405160e081016001600160401b03811182821017156100e457634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461012f57600080fd5b50565b600081830361010081121561014657600080fd5b61014e6100b4565b83516101598161011a565b815260e0601f198301121561016d57600080fd5b6101756100ea565b915060208401516101858161011a565b8083525060408401516020830152606084015160408301526080840151606083015260a0840151608083015260c084015160a083015260e084015160c0830152816020820152809250505092915050565b610bb8806101e56000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063b610fb6411610071578063b610fb6414610148578063b782cc4914610150578063c45a01551461017b578063c9a0b4061461018e578063ebd238fb14610196578063f8a8f9e71461020057600080fd5b806350bc9995146100ae578063839e7e89146100d05780638ea74f42146101015780639361076a14610116578063a3d09c1b14610128575b600080fd5b600b546100bb9060ff1681565b60405190151581526020015b60405180910390f35b6100f36100de366004610935565b60096020526000908152604090206002015481565b6040519081526020016100c7565b61011461010f366004610957565b610213565b005b600b546100bb90610100900460ff1681565b6100f3610136366004610935565b600a6020526000908152604090205481565b610114610379565b600154610163906001600160a01b031681565b6040516001600160a01b0390911681526020016100c7565b600054610163906001600160a01b031681565b610114610527565b6002546003546004546005546006546007546008546101c1966001600160a01b031695949392919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100c7565b61011461020e3660046109e0565b6106d0565b6000546001600160a01b031633148061023657506001546001600160a01b031633145b6102775760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064015b60405180910390fd5b6003546000906102879083610ad2565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156102df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103039190610af1565b506000546001600160a01b0316331461033157816002600401600082825461032b9190610b13565b90915550505b60065460408051848152602081019290925281018290527f6213dc923ba9cebd39b57f99bbecb140a32b0af21fa6c41feee100e40b9179289060600160405180910390a15050565b600b5462010000900460ff166103c35760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161026e565b600b805462ff000019811690915560ff16156103f15760405162461bcd60e51b815260040161026e90610b2b565b336000908152600a60205260409020548061043f5760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161026e565b336000908152600a6020526040812081905560055461045e9083610ad2565b60025460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d49190610af1565b506001604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a35050600b805462ff0000191662010000179055565b600b5462010000900460ff166105715760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161026e565b600b805462ff000019811690915560ff161561059f5760405162461bcd60e51b815260040161026e90610b2b565b33600090815260096020526040812060028101805492905590806105f65760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161026e565b6004546000906106069083610ad2565b60025460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610af1565b506000604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a35050600b805462ff000019166201000017905550565b600b54610100900460ff16156106f85760405162461bcd60e51b815260040161026e90610b2b565b6000546001600160a01b031633146107425760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b604482015260640161026e565b60005b81518110156109155760006009600084848151811061076657610766610b51565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160000160008585815181106107ae576107ae610b51565b6020908102919091018101518101516001600160a01b031682528101919091526040016000205460ff169050806108915760018260000160008686815181106107f9576107f9610b51565b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508160010184848151811061085257610852610b51565b60209081029190910181015181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b6002820180549060006108a383610b67565b9190505550600a60008585815181106108be576108be610b51565b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060008154809291906108fb90610b67565b91905055505050808061090d90610b67565b915050610745565b5050565b80356001600160a01b038116811461093057600080fd5b919050565b60006020828403121561094757600080fd5b61095082610919565b9392505050565b60006020828403121561096957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156109a9576109a9610970565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109d8576109d8610970565b604052919050565b600060208083850312156109f357600080fd5b823567ffffffffffffffff80821115610a0b57600080fd5b818501915085601f830112610a1f57600080fd5b813581811115610a3157610a31610970565b610a3f848260051b016109af565b818152848101925060069190911b830184019087821115610a5f57600080fd5b928401925b81841015610ab15760408489031215610a7d5760008081fd5b610a85610986565b610a8e85610919565b8152610a9b868601610919565b8187015283526040939093019291840191610a64565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610aec57610aec610abc565b500290565b600060208284031215610b0357600080fd5b8151801515811461095057600080fd5b60008219821115610b2657610b26610abc565b500190565b6020808252600c908201526b10d310525357d4105554d15160a21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610b7b57610b7b610abc565b506001019056fea26469706673582212206d5d5676d091fd8daaeb29c060f4a681b568bcaf44063d4d68189ed346bf638264736f6c634300080b0033a26469706673582212208b21305366c56411d4859ffe51abb1bfb6176b2631abc5b5c16c5a87ad5e9a4f64736f6c634300080b0033",
  "deployedBytecode": "0x608060405260043610620000855760003560e01c80636764cdc011620000545780636764cdc0146200014e5780638ba97b9b1462000173578063be74615f1462000198578063cd6dc68714620001bf57600080fd5b80632a68f64e146200008a578063581ff0c814620000c95780635ab78ee114620000e2578063660a69cb1462000127575b600080fd5b3480156200009757600080fd5b50600454620000ac906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000e0620000da36600462000b53565b620001e4565b005b348015620000ef57600080fd5b50620001166200010136600462000bf4565b60026020526000908152604090205460ff1681565b6040519015158152602001620000c0565b3480156200013457600080fd5b506200013f620005c3565b604051620000c0919062000c1b565b3480156200015b57600080fd5b50620000e06200016d36600462000c91565b620006a3565b3480156200018057600080fd5b50620000ac6200019236600462000e91565b6200089d565b348015620001a557600080fd5b50620001b060035481565b604051908152602001620000c0565b348015620001cc57600080fd5b50620000e0620001de36600462000eab565b620008c8565b600454600160a01b900460ff16620002355760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b60448201526064015b60405180910390fd5b6004805460ff60a01b1916905580516003543410156200028c5760405162461bcd60e51b81526020600482015260116024820152704e4f545f454e4f554748545f56414c554560781b60448201526064016200022c565b80516001600160a01b0316620002dd5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b60448201526064016200022c565b600081602001518260800151620002f5919062000ef0565b82516040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156200034d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000373919062000f12565b506200037e62000a00565b3381526020810183905260405160009082906200039b9062000a6a565b62000409919060006101008201905060018060a01b038084511683526020840151818151166020850152602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c081015160e0850152505092915050565b604051809103906000f08015801562000426573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0384811691821790925560008181526002602052604090819020805460ff19169094179093558751925163095ea7b360e01b8152600481019190915260248101879052929350169063095ea7b3906044016020604051808303816000875af1158015620004d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fc919062000f12565b506080840151604051634753a7a160e11b815260048101919091526001600160a01b03821690638ea74f4290602401600060405180830381600087803b1580156200054657600080fd5b505af11580156200055b573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201529081018690527f1ebff2f2b8dfaf965fffb2fddfa8e705e28ca6c7f0966cfc8f8587449774b6e09250606001905060405180910390a150506004805460ff60a01b1916600160a01b179055505050565b60015460609060008167ffffffffffffffff811115620005e757620005e762000a78565b60405190808252806020026020018201604052801562000611578160200160208202803683370190505b50905060005b828110156200069c5760006001828154811062000638576200063862000f36565b9060005260206000200160009054906101000a90046001600160a01b03169050808383815181106200066e576200066e62000f36565b6001600160a01b0390921660209283029190910190910152506200069460018262000f4c565b905062000617565b5092915050565b600454600160a01b900460ff16620006f05760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b60448201526064016200022c565b6004805460ff60a01b1981169091556001600160a01b03163314620007485760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064016200022c565b60005b815151811015620008865760008260000151828151811062000771576200077162000f36565b602090810291909101810151516001600160a01b0381166000908152600290925260409091205490915060ff16620007e35760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f504f4f4c5f4144445245535360601b60448201526064016200022c565b6000819050806001600160a01b031663f8a8f9e78560000151858151811062000810576200081062000f36565b6020026020010151602001516040518263ffffffff1660e01b81526004016200083a919062000f67565b600060405180830381600087803b1580156200085557600080fd5b505af11580156200086a573d6000803e3d6000fd5b50505050505080806200087d9062000fc5565b9150506200074b565b50506004805460ff60a01b1916600160a01b179055565b60018181548110620008ae57600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff1615808015620008e95750600054600160ff909116105b80620009055750303b15801562000905575060005460ff166001145b6200096a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200022c565b6000805460ff1916600117905580156200098e576000805461ff0019166101001790555b6004805460038490556001600160a81b0319166001600160a01b03851617600160a01b1790558015620009fb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b604051806040016040528060006001600160a01b0316815260200162000a656040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b610d9d8062000fe483390190565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171562000ab45762000ab462000a78565b60405290565b6040516020810167ffffffffffffffff8111828210171562000ab45762000ab462000a78565b6040805190810167ffffffffffffffff8111828210171562000ab45762000ab462000a78565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000b325762000b3262000a78565b604052919050565b6001600160a01b038116811462000b5057600080fd5b50565b600060e0828403121562000b6657600080fd5b6040516020810181811067ffffffffffffffff8211171562000b8c5762000b8c62000a78565b60405262000b9962000a8e565b833562000ba68162000b3a565b808252506020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c0820152808252508091505092915050565b60006020828403121562000c0757600080fd5b813562000c148162000b3a565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000c5e5783516001600160a01b03168352928401929184019160010162000c37565b50909695505050505050565b600067ffffffffffffffff82111562000c875762000c8762000a78565b5060051b60200190565b60006020828403121562000ca457600080fd5b67ffffffffffffffff808335111562000cbc57600080fd5b6020833584018503121562000cd057600080fd5b62000cda62000aba565b818435850135111562000cec57600080fd5b83358401803501601f8101861362000d0357600080fd5b62000d1962000d13823562000c6a565b62000b06565b81358082526020808301929160051b84010188101562000d3857600080fd5b602083015b6020843560051b85010181101562000e8357858135111562000d5e57600080fd5b803584016040818b03601f1901121562000d7757600080fd5b62000d8162000ae0565b62000d90602083013562000b3a565b60208201358152876040830135111562000da957600080fd5b6040820135820191508a603f83011262000dc257600080fd5b62000dd562000d13602084013562000c6a565b602083810135808352908201919060061b84016040018d81111562000df957600080fd5b6040850194505b8085101562000e63576040858f03121562000e1a57600080fd5b62000e2462000ae0565b62000e30863562000b3a565b8535815262000e43602087013562000b3a565b602086013560208201528084525060208301925060408501945062000e00565b508060208401525050808552505060208301925060208101905062000d3d565b508352509095945050505050565b60006020828403121562000ea457600080fd5b5035919050565b6000806040838503121562000ebf57600080fd5b823562000ecc8162000b3a565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161562000f0d5762000f0d62000eda565b500290565b60006020828403121562000f2557600080fd5b8151801515811462000c1457600080fd5b634e487b7160e01b600052603260045260246000fd5b6000821982111562000f625762000f6262000eda565b500190565b602080825282518282018190526000919060409081850190868401855b8281101562000fb857815180516001600160a01b039081168652908701511686850152928401929085019060010162000f84565b5091979650505050505050565b600060001982141562000fdc5762000fdc62000eda565b506001019056fe608060405234801561001057600080fd5b50604051610d9d380380610d9d83398101604081905261002f91610132565b60208181015160008054336001600160a01b03199182161790915592516001805485166001600160a01b0392831617905581516002805490951691161790925581015160035560408101516004556060810151600555608081015160065560a081015160075560c00151600855600b80546201000062ffffff199091161790556101d6565b604080519081016001600160401b03811182821017156100e457634e487b7160e01b600052604160045260246000fd5b60405290565b60405160e081016001600160401b03811182821017156100e457634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461012f57600080fd5b50565b600081830361010081121561014657600080fd5b61014e6100b4565b83516101598161011a565b815260e0601f198301121561016d57600080fd5b6101756100ea565b915060208401516101858161011a565b8083525060408401516020830152606084015160408301526080840151606083015260a0840151608083015260c084015160a083015260e084015160c0830152816020820152809250505092915050565b610bb8806101e56000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063b610fb6411610071578063b610fb6414610148578063b782cc4914610150578063c45a01551461017b578063c9a0b4061461018e578063ebd238fb14610196578063f8a8f9e71461020057600080fd5b806350bc9995146100ae578063839e7e89146100d05780638ea74f42146101015780639361076a14610116578063a3d09c1b14610128575b600080fd5b600b546100bb9060ff1681565b60405190151581526020015b60405180910390f35b6100f36100de366004610935565b60096020526000908152604090206002015481565b6040519081526020016100c7565b61011461010f366004610957565b610213565b005b600b546100bb90610100900460ff1681565b6100f3610136366004610935565b600a6020526000908152604090205481565b610114610379565b600154610163906001600160a01b031681565b6040516001600160a01b0390911681526020016100c7565b600054610163906001600160a01b031681565b610114610527565b6002546003546004546005546006546007546008546101c1966001600160a01b031695949392919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100c7565b61011461020e3660046109e0565b6106d0565b6000546001600160a01b031633148061023657506001546001600160a01b031633145b6102775760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064015b60405180910390fd5b6003546000906102879083610ad2565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af11580156102df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103039190610af1565b506000546001600160a01b0316331461033157816002600401600082825461032b9190610b13565b90915550505b60065460408051848152602081019290925281018290527f6213dc923ba9cebd39b57f99bbecb140a32b0af21fa6c41feee100e40b9179289060600160405180910390a15050565b600b5462010000900460ff166103c35760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161026e565b600b805462ff000019811690915560ff16156103f15760405162461bcd60e51b815260040161026e90610b2b565b336000908152600a60205260409020548061043f5760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161026e565b336000908152600a6020526040812081905560055461045e9083610ad2565b60025460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d49190610af1565b506001604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a35050600b805462ff0000191662010000179055565b600b5462010000900460ff166105715760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161026e565b600b805462ff000019811690915560ff161561059f5760405162461bcd60e51b815260040161026e90610b2b565b33600090815260096020526040812060028101805492905590806105f65760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161026e565b6004546000906106069083610ad2565b60025460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610af1565b506000604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a35050600b805462ff000019166201000017905550565b600b54610100900460ff16156106f85760405162461bcd60e51b815260040161026e90610b2b565b6000546001600160a01b031633146107425760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b604482015260640161026e565b60005b81518110156109155760006009600084848151811061076657610766610b51565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020905060008160000160008585815181106107ae576107ae610b51565b6020908102919091018101518101516001600160a01b031682528101919091526040016000205460ff169050806108915760018260000160008686815181106107f9576107f9610b51565b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508160010184848151811061085257610852610b51565b60209081029190910181015181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b6002820180549060006108a383610b67565b9190505550600a60008585815181106108be576108be610b51565b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060008154809291906108fb90610b67565b91905055505050808061090d90610b67565b915050610745565b5050565b80356001600160a01b038116811461093057600080fd5b919050565b60006020828403121561094757600080fd5b61095082610919565b9392505050565b60006020828403121561096957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156109a9576109a9610970565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109d8576109d8610970565b604052919050565b600060208083850312156109f357600080fd5b823567ffffffffffffffff80821115610a0b57600080fd5b818501915085601f830112610a1f57600080fd5b813581811115610a3157610a31610970565b610a3f848260051b016109af565b818152848101925060069190911b830184019087821115610a5f57600080fd5b928401925b81841015610ab15760408489031215610a7d5760008081fd5b610a85610986565b610a8e85610919565b8152610a9b868601610919565b8187015283526040939093019291840191610a64565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610aec57610aec610abc565b500290565b600060208284031215610b0357600080fd5b8151801515811461095057600080fd5b60008219821115610b2657610b26610abc565b500190565b6020808252600c908201526b10d310525357d4105554d15160a21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610b7b57610b7b610abc565b506001019056fea26469706673582212206d5d5676d091fd8daaeb29c060f4a681b568bcaf44063d4d68189ed346bf638264736f6c634300080b0033a26469706673582212208b21305366c56411d4859ffe51abb1bfb6176b2631abc5b5c16c5a87ad5e9a4f64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "_notEntered": {
        "details": "Guard variable for re-entrancy checks"
      },
      "poolCreationFee": {
        "details": "Should be multiplied by unit of ether(1e18)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreateIncentivePool(address,address,uint256)": {
        "notice": "Emitted when leftTransactionNum is added"
      }
    },
    "kind": "user",
    "methods": {
      "incentivePools(uint256)": {
        "notice": "List of product incentive pools"
      },
      "isValidPool(address)": {
        "notice": "Mapping of pool address to validness(is it deployed?)"
      },
      "masterAdmin()": {
        "notice": "Address of the master admin of split"
      },
      "poolCreationFee()": {
        "notice": "Pool creation fee paid by contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1053,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1056,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 354,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "incentivePools",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IncentivePool)340)dyn_storage"
      },
      {
        "astId": 359,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "isValidPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 362,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "poolCreationFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 365,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "masterAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 368,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "_notEntered",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IncentivePool)340)dyn_storage": {
        "base": "t_contract(IncentivePool)340",
        "encoding": "dynamic_array",
        "label": "contract IncentivePool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IncentivePool)340": {
        "encoding": "inplace",
        "label": "contract IncentivePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}